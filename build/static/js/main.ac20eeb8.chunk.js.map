{"version":3,"sources":["../node_modules/@ion-phaser/core/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","i18n/locales.jsx","pages/HomePage/HomePage.jsx","pages/GamePage/GameScene.js","pages/GamePage/GamePage.jsx","stores/UserStore.js","stores/GameStore.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","en","pl","HomePage","props","defaultMessage","scene","init","this","cameras","main","setBackgroundColor","create","helloWorld","add","text","centerX","centerY","font","fill","setOrigin","update","angle","GamePage","useState","game","setGame","width","height","type","Phaser","AUTO","initialize","userData","observable","action","stores","userStore","gameStore","observer","locale","defaultLocale","key","messages","translations","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4FAAA,IAAIA,EAAM,CACT,wBAAyB,CACxB,KACA,IAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBS,MAG7BX,EAAoBY,KAAO,WAC1B,OAAOC,OAAOD,KAAKb,IAEpBC,EAAoBW,GAAK,KACzBG,EAAOC,QAAUf,G,uJCrBF,GAAEgB,G,OAAIC,M,UCCRC,EAAW,SAACC,GAErB,OACI,4BAAI,kBAAC,IAAD,CAAkBR,GAAG,YAAYS,eAAe,gB,oCCP9CC,EAAS,CACrBC,KAAM,WACJC,KAAKC,QAAQC,KAAKC,mBAAmB,YAEvCC,OAAQ,WACNJ,KAAKK,WAAaL,KAAKM,IAAIC,KACzBP,KAAKC,QAAQC,KAAKM,QAClBR,KAAKC,QAAQC,KAAKO,QAClB,cACA,CACEC,KAAM,aACNC,KAAM,YAGVX,KAAKK,WAAWO,UAAU,KAE5BC,OAAQ,WACNb,KAAKK,WAAWS,OAAS,IAjBfhB,MCKDiB,EAAW,SAAAnB,GAAU,IAAD,EACToB,mBAAS,MADA,mBAC1BC,EAD0B,KACpBC,EADoB,OAETF,oBAAS,GAFA,mBAE1BjB,EAF0B,UAW/B,OAPAmB,EAAQ,CACNC,MAAO,OACPC,OAAQ,OACRC,KAAMC,IAAOC,KACbzB,MAAO,CAAEA,WAIT,iCACE,sBAAC,IAAD,CAAWmB,KAAMA,EAAMO,WAAYzB,M,oDCL1B,M,sIANK0B,GACZzB,KAAKyB,SAAWA,M,2CAJnBC,K,wEAAsB,M,mCAGtBC,K,uECDU,M,kCCYTC,EAAS,CACbC,YACAC,aAuBaC,mBApBf,WACE,OACE,kBAAC,IAAD,CACEC,OAVa,KAWbC,cAAc,KACdC,IAZa,KAabC,SAAUC,EAAY,IAEtB,kBAAC,IAAaR,EACZ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,IAAIC,UAAW5C,IACjC,kBAAC,IAAD,CAAO0C,OAAK,EAACC,KAAK,YAAYC,UAAWxB,WCvBjCyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpE,MAAK,SAAAqE,GACjCA,EAAaC,iB","file":"static/js/main.ac20eeb8.chunk.js","sourcesContent":["var map = {\n\t\"./ion-phaser.entry.js\": [\n\t\t1527,\n\t\t5\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 1519;\nmodule.exports = webpackAsyncContext;","import pl from './translations/pl.json';\nimport en from './translations/en.json';\n\nexport default { en, pl };","import React from 'react';\nimport { FormattedMessage } from 'react-intl.macro';\n\n\nexport const HomePage = (props) => {\n\n    return (\n        <h2><FormattedMessage id=\"app.title\" defaultMessage=\"NeuroCars\" /></h2>\n    )\n}","export const {scene} = {\n  init: function() {\n    this.cameras.main.setBackgroundColor(\"#24252A\");\n  },\n  create: function() {\n    this.helloWorld = this.add.text(\n      this.cameras.main.centerX,\n      this.cameras.main.centerY,\n      \"Hello World\",\n      {\n        font: \"40px Arial\",\n        fill: \"#ffffff\"\n      }\n    );\n    this.helloWorld.setOrigin(0.5);\n  },\n  update: function() {\n    this.helloWorld.angle += 1;\n  }\n};\n","import { React, useState } from \"react\";\nimport Phaser from \"phaser\";\nimport { IonPhaser } from \"@ion-phaser/react\";\nimport { scene } from \"./GameScene.js\";\n\nexport const GamePage = props => {\n  let [game, setGame] = useState(null);\n  let [init, setInit] = useState(true);\n\n  setGame({\n    width: \"100%\",\n    height: \"100%\",\n    type: Phaser.AUTO,\n    scene: { scene }\n  });\n\n  return (\n    <div>\n      <IonPhaser game={game} initialize={init} />\n    </div>\n  );\n};\n","import { action, observable } from 'mobx';\n\nclass UserStore {\n\n    @observable userData = {};\n\n\n    @action setUser(userData) {\n        this.userData = userData;\n      }\n\n}\n\nexport default new UserStore();","import { action, observable } from 'mobx';\n\nclass GameStore {\n\n}\n\nexport default new GameStore();","import React from \"react\";\nimport \"./App.css\";\nimport \"@ion-phaser/core/dist/ionphaser.js\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { observer, Provider } from \"mobx-react\";\n\nimport { IntlProvider } from \"react-intl\";\nimport translations from \"./i18n/locales\";\n\nimport { HomePage } from \"./pages/HomePage/HomePage\";\nimport { GamePage } from \"./pages/GamePage/GamePage\";\n\nimport userStore from \"./stores/UserStore\";\nimport gameStore from \"./stores/GameStore\";\n\n//In future this would be set by a control on the page and saved to store\nconst localeProp = \"en\";\n\nconst stores = {\n  userStore,\n  gameStore\n};\n\nfunction App() {\n  return (\n    <IntlProvider\n      locale={localeProp}\n      defaultLocale=\"en\"\n      key={localeProp}\n      messages={translations[localeProp]}\n    >\n      <Provider {...stores}>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={HomePage} />\n            <Route exact path=\"/gameTest\" component={GamePage} />\n          </Switch>\n        </Router>\n      </Provider>\n    </IntlProvider>\n  );\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}